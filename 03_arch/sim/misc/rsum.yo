                            | # Execution begins at address 0
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp
0x00a: 804800000000000000   | 	call main
0x013: 00                   | 	halt
                            | 
                            | # Sample linked list
0x018:                      | 	.align 8
0x018:                      | linked_list:	
0x018:                      | 	ele1:
0x018: 0a00000000000000     | 		.quad 0x00a
0x020: 2800000000000000     | 		.quad ele2
0x028:                      | 	ele2:
0x028: b000000000000000     | 		.quad 0x0b0
0x030: 3800000000000000     | 		.quad ele3
0x038:                      | 	ele3:
0x038: 000c000000000000     | 		.quad 0xc00
0x040: 0000000000000000     | 		.quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 | 	irmovq linked_list, %rdi
0x052: 805c00000000000000   | 	call rsum_list 			# sum_list(linked_list) 
0x05b: 90                   | 	ret
                            | 
                            | # long rsum_list(list_ptr ls)
                            | # start in %rdi
0x05c:                      | rsum_list:
0x05c: 6277                 | 	andq %rdi, %rdi			# Check if ls is a NULL pointer.
0x05e: 738b00000000000000   | 	je end
0x067: a03f                 | 	pushq %rbx			# Free up %rbx for later use.		
0x069: 50370000000000000000 | 	mrmovq (%rdi), %rbx		#  
0x073: 50770800000000000000 | 	mrmovq 8(%rdi), %rdi		# Point to ele2.
0x07d: 805c00000000000000   | 	call rsum_list
0x086: 6030                 | 	addq %rbx, %rax
0x088: b03f                 | 	popq %rbx
0x08a: 90                   | 	ret
0x08b:                      | end:
0x08b: 6300                 | 	xorq %rax, %rax			# Set return value to 0.
0x08d: 90                   | 	ret
                            | 
                            | # Stack starts here and grows to lower addresses.
0x200:                      | 	.pos 0x200
0x200:                      | stack:
