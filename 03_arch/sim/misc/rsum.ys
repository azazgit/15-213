# Execution begins at address 0
	.pos 0
	irmovq stack, %rsp
	call main
	halt

# Sample linked list
	.align 8
linked_list:	
	ele1:
		.quad 0x00a
		.quad ele2
	ele2:
		.quad 0x0b0
		.quad ele3
	ele3:
		.quad 0xc00
		.quad 0

main:
	irmovq linked_list, %rdi
	call rsum_list 			# sum_list(linked_list) 
	ret

# long rsum_list(list_ptr ls)
# start in %rdi
rsum_list:
	andq %rdi, %rdi			# Check if ls is a NULL pointer.
	je end
	pushq %rbx			# Free up %rbx for later use.		
	mrmovq (%rdi), %rbx		#  
	mrmovq 8(%rdi), %rdi		# Point to ele2.
	call rsum_list
	addq %rbx, %rax
	popq %rbx
	ret
end:
	xorq %rax, %rax			# Set return value to 0.
	ret

# Stack starts here and grows to lower addresses.
	.pos 0x200
stack:
