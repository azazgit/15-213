                            | #######################################################################
                            | # Test for copying block of size 64;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44008000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f24000000000000000 | 	irmovq $64, %rdx		# src and dst have 64 elements
0x014: 30f6b805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7a003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 803202000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-y:wqs */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# Set count to 0.
0x03d: 6222                 | 	andq %rdx,%rdx		# If len <= 0...
0x03f: 713102000000000000   | 	jle Done		# ... go to Done.
                            | 
                            | 	# Check if less than 8 elements.
0x048: 2028                 | 	rrmovq %rdx, %r8
0x04a: c0f8f8ffffffffffffff | 	iaddq $-8, %r8		# %r8 will hold no of elements remaining. See later use. 
0x054: 72d601000000000000   | 	jl LessThan8Elements
0x05d:                      | index0:
0x05d: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# Read val from src...
0x067: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it at dst.
0x071: 62aa                 | 	andq %r10, %r10		# If val <= 0...
0x073: 718600000000000000   | 	jle index1		# ...go to next element,...
0x07c: c0f00100000000000000 | 	iaddq $1, %rax		# ...else count++.
0x086:                      | index1:
0x086: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	
0x090: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x09a: 62aa                 | 	andq %r10, %r10
0x09c: 71af00000000000000   | 	jle index2
0x0a5: c0f00100000000000000 | 	iaddq $1, %rax
0x0af:                      | index2:
0x0af: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	
0x0b9: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0c3: 62aa                 | 	andq %r10, %r10
0x0c5: 71d800000000000000   | 	jle index3
0x0ce: c0f00100000000000000 | 	iaddq $1, %rax
0x0d8:                      | index3:
0x0d8: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	
0x0e2: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x0ec: 62aa                 | 	andq %r10, %r10
0x0ee: 710101000000000000   | 	jle index4
0x0f7: c0f00100000000000000 | 	iaddq $1, %rax
0x101:                      | index4:
0x101: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	
0x10b: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x115: 62aa                 | 	andq %r10, %r10
0x117: 712a01000000000000   | 	jle index5
0x120: c0f00100000000000000 | 	iaddq $1, %rax
0x12a:                      | index5:
0x12a: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	
0x134: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x13e: 62aa                 | 	andq %r10, %r10
0x140: 715301000000000000   | 	jle index6
0x149: c0f00100000000000000 | 	iaddq $1, %rax
0x153:                      | index6:
0x153: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	
0x15d: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x167: 62aa                 | 	andq %r10, %r10
0x169: 717c01000000000000   | 	jle index7
0x172: c0f00100000000000000 | 	iaddq $1, %rax
0x17c:                      | index7:
0x17c: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	
0x186: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x190: 62aa                 | 	andq %r10, %r10
0x192: 71a501000000000000   | 	jle NextBatch
0x19b: c0f00100000000000000 | 	iaddq $1, %rax
0x1a5:                      | NextBatch:
0x1a5: c0f74000000000000000 | 	iaddq $64, %rdi		# Point to the start of the next 8 elements in src array.
0x1af: c0f64000000000000000 | 	iaddq $64, %rsi		# Point to the start of the next 8 elements in dst array.
0x1b9: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# At this point 8 elems have been looped, but %rdx does not ...
0x1c3: c0f8f8ffffffffffffff | 	iaddq $-8, %r8		# ...reflect this. Only %r8 does, which is why we use value in %r8.
0x1cd: 755d00000000000000   | 	jge index0
0x1d6:                      | LessThan8Elements:
0x1d6: 6222                 | 	andq %rdx, %rdx		# If len <= 0...
0x1d8: 713102000000000000   | 	jle Done		# ...no more elements left.
0x1e1:                      | Loop:
0x1e1: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# Read val from src...
0x1eb: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst.
0x1f5: 62aa                 | 	andq %r10, %r10		# If val <= 0...
0x1f7: 710a02000000000000   | 	jle NotPos		# ...go to NotPos...
0x200: c0f00100000000000000 | 	iaddq $1, %rax		# ...else count++.
0x20a:                      | NotPos:	
0x20a: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x214: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x21e: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x228: 76e101000000000000   | 	jg Loop			# If len > 0, continue with remaining elements.
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x231:                      | Done:
0x231: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x232:                      | End:
                            | #/* $end ncopy-ys */
0x232:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 37.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x232:                      | check:
                            | 	# Return value test
0x232: 30fa2500000000000000 | 	irmovq $37,%r10
0x23c: 61a0                 | 	subq %r10,%rax
0x23e: 735a02000000000000   | 	je checkb
0x247: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x251: 709803000000000000   | 	jmp cdone
0x25a:                      | checkb:
                            | 	# Code length check
0x25a: 30f03202000000000000 | 	irmovq EndFun,%rax
0x264: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x26e: 6120                 | 	subq %rdx,%rax
0x270: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x27a: 6102                 | 	subq %rax,%rdx
0x27c: 759802000000000000   | 	jge checkm
0x285: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x28f: 709803000000000000   | 	jmp cdone
0x298:                      | checkm:
0x298: 30f2b805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x2a2: 30f3a003000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x2ac: 30f74000000000000000 | 	irmovq $64,%rdi  # Count
0x2b6: 6277                 | 	andq %rdi,%rdi
0x2b8: 731603000000000000   | 	je checkpre         # Skip check if count = 0
0x2c1:                      | mcloop:
0x2c1: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x2cb: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x2d5: 6160                 | 	subq %rsi,%rax
0x2d7: 73f302000000000000   | 	je  mok
0x2e0: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x2ea: 709803000000000000   | 	jmp cdone
0x2f3:                      | mok:
0x2f3: 30f00800000000000000 | 	irmovq $8,%rax
0x2fd: 6002                 | 	addq %rax,%rdx	  # dest ++
0x2ff: 6003                 | 	addq %rax,%rbx    # src++
0x301: 30f00100000000000000 | 	irmovq $1,%rax
0x30b: 6107                 | 	subq %rax,%rdi    # cnt--
0x30d: 76c102000000000000   | 	jg mcloop
0x316:                      | checkpre:
                            | 	# Check for corruption
0x316: 30f2b005000000000000 | 	irmovq Predest,%rdx
0x320: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x32a: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x334: 6120                 | 	subq %rdx,%rax
0x336: 735203000000000000   | 	je checkpost
0x33f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x349: 709803000000000000   | 	jmp cdone
0x352:                      | checkpost:
                            | 	# Check for corruption
0x352: 30f2b807000000000000 | 	irmovq Postdest,%rdx
0x35c: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x366: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x370: 6120                 | 	subq %rdx,%rax
0x372: 738e03000000000000   | 	je checkok
0x37b: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x385: 709803000000000000   | 	jmp cdone
0x38e:                      | checkok:
                            | 	# Successful checks
0x38e: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x398:                      | cdone:
0x398: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3a0:                      | 	.align 8
0x3a0:                      | src:
0x3a0: ffffffffffffffff     | 	.quad -1
0x3a8: 0200000000000000     | 	.quad 2
0x3b0: 0300000000000000     | 	.quad 3
0x3b8: fcffffffffffffff     | 	.quad -4
0x3c0: 0500000000000000     | 	.quad 5
0x3c8: faffffffffffffff     | 	.quad -6
0x3d0: f9ffffffffffffff     | 	.quad -7
0x3d8: 0800000000000000     | 	.quad 8
0x3e0: f7ffffffffffffff     | 	.quad -9
0x3e8: f6ffffffffffffff     | 	.quad -10
0x3f0: f5ffffffffffffff     | 	.quad -11
0x3f8: 0c00000000000000     | 	.quad 12
0x400: f3ffffffffffffff     | 	.quad -13
0x408: f2ffffffffffffff     | 	.quad -14
0x410: 0f00000000000000     | 	.quad 15
0x418: 1000000000000000     | 	.quad 16
0x420: 1100000000000000     | 	.quad 17
0x428: 1200000000000000     | 	.quad 18
0x430: edffffffffffffff     | 	.quad -19
0x438: 1400000000000000     | 	.quad 20
0x440: ebffffffffffffff     | 	.quad -21
0x448: 1600000000000000     | 	.quad 22
0x450: 1700000000000000     | 	.quad 23
0x458: 1800000000000000     | 	.quad 24
0x460: e7ffffffffffffff     | 	.quad -25
0x468: e6ffffffffffffff     | 	.quad -26
0x470: e5ffffffffffffff     | 	.quad -27
0x478: 1c00000000000000     | 	.quad 28
0x480: e3ffffffffffffff     | 	.quad -29
0x488: 1e00000000000000     | 	.quad 30
0x490: 1f00000000000000     | 	.quad 31
0x498: 2000000000000000     | 	.quad 32
0x4a0: dfffffffffffffff     | 	.quad -33
0x4a8: 2200000000000000     | 	.quad 34
0x4b0: 2300000000000000     | 	.quad 35
0x4b8: 2400000000000000     | 	.quad 36
0x4c0: dbffffffffffffff     | 	.quad -37
0x4c8: 2600000000000000     | 	.quad 38
0x4d0: 2700000000000000     | 	.quad 39
0x4d8: 2800000000000000     | 	.quad 40
0x4e0: 2900000000000000     | 	.quad 41
0x4e8: d6ffffffffffffff     | 	.quad -42
0x4f0: d5ffffffffffffff     | 	.quad -43
0x4f8: d4ffffffffffffff     | 	.quad -44
0x500: d3ffffffffffffff     | 	.quad -45
0x508: 2e00000000000000     | 	.quad 46
0x510: d1ffffffffffffff     | 	.quad -47
0x518: d0ffffffffffffff     | 	.quad -48
0x520: 3100000000000000     | 	.quad 49
0x528: ceffffffffffffff     | 	.quad -50
0x530: 3300000000000000     | 	.quad 51
0x538: 3400000000000000     | 	.quad 52
0x540: 3500000000000000     | 	.quad 53
0x548: caffffffffffffff     | 	.quad -54
0x550: 3700000000000000     | 	.quad 55
0x558: 3800000000000000     | 	.quad 56
0x560: 3900000000000000     | 	.quad 57
0x568: 3a00000000000000     | 	.quad 58
0x570: c5ffffffffffffff     | 	.quad -59
0x578: 3c00000000000000     | 	.quad 60
0x580: 3d00000000000000     | 	.quad 61
0x588: 3e00000000000000     | 	.quad 62
0x590: 3f00000000000000     | 	.quad 63
0x598: c0ffffffffffffff     | 	.quad -64
0x5a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5b0:                      | 	.align 16
0x5b0:                      | Predest:
0x5b0: fadebc0000000000     | 	.quad 0xbcdefa
0x5b8:                      | dest:
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8:                      | Postdest:
0x7b8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7c0:                      | .align 8
                            | # Run time stack
0x7c0: 0000000000000000     | 	.quad 0
0x7c8: 0000000000000000     | 	.quad 0
0x7d0: 0000000000000000     | 	.quad 0
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
                            | 
0x840:                      | Stack:
