                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41003000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66802000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-y:wqs */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# Set count to 0.
0x034: 6222                 | 	andq %rdx,%rdx		# If len <= 0...
0x036: 712802000000000000   | 	jle Done		# ... go to Done.
                            | 
                            | 	# Check if less than 8 elements.
0x03f: 2028                 | 	rrmovq %rdx, %r8
0x041: c0f8f8ffffffffffffff | 	iaddq $-8, %r8		# %r8 will hold no of elements remaining. See later use. 
0x04b: 72cd01000000000000   | 	jl LessThan8Elements
0x054:                      | index0:
0x054: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# Read val from src...
0x05e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it at dst.
0x068: 62aa                 | 	andq %r10, %r10		# If val <= 0...
0x06a: 717d00000000000000   | 	jle index1		# ...go to next element,...
0x073: c0f00100000000000000 | 	iaddq $1, %rax		# ...else count++.
0x07d:                      | index1:
0x07d: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	
0x087: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x091: 62aa                 | 	andq %r10, %r10
0x093: 71a600000000000000   | 	jle index2
0x09c: c0f00100000000000000 | 	iaddq $1, %rax
0x0a6:                      | index2:
0x0a6: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	
0x0b0: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0ba: 62aa                 | 	andq %r10, %r10
0x0bc: 71cf00000000000000   | 	jle index3
0x0c5: c0f00100000000000000 | 	iaddq $1, %rax
0x0cf:                      | index3:
0x0cf: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	
0x0d9: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x0e3: 62aa                 | 	andq %r10, %r10
0x0e5: 71f800000000000000   | 	jle index4
0x0ee: c0f00100000000000000 | 	iaddq $1, %rax
0x0f8:                      | index4:
0x0f8: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	
0x102: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x10c: 62aa                 | 	andq %r10, %r10
0x10e: 712101000000000000   | 	jle index5
0x117: c0f00100000000000000 | 	iaddq $1, %rax
0x121:                      | index5:
0x121: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	
0x12b: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x135: 62aa                 | 	andq %r10, %r10
0x137: 714a01000000000000   | 	jle index6
0x140: c0f00100000000000000 | 	iaddq $1, %rax
0x14a:                      | index6:
0x14a: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	
0x154: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x15e: 62aa                 | 	andq %r10, %r10
0x160: 717301000000000000   | 	jle index7
0x169: c0f00100000000000000 | 	iaddq $1, %rax
0x173:                      | index7:
0x173: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	
0x17d: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x187: 62aa                 | 	andq %r10, %r10
0x189: 719c01000000000000   | 	jle NextBatch
0x192: c0f00100000000000000 | 	iaddq $1, %rax
0x19c:                      | NextBatch:
0x19c: c0f74000000000000000 | 	iaddq $64, %rdi		# Point to the start of the next 8 elements in src array.
0x1a6: c0f64000000000000000 | 	iaddq $64, %rsi		# Point to the start of the next 8 elements in dst array.
0x1b0: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# At this point 8 elems have been looped, but %rdx does not ...
0x1ba: c0f8f8ffffffffffffff | 	iaddq $-8, %r8		# ...reflect this. Only %r8 does, which is why we use value in %r8.
0x1c4: 755400000000000000   | 	jge index0
0x1cd:                      | LessThan8Elements:
0x1cd: 6222                 | 	andq %rdx, %rdx		# If len <= 0...
0x1cf: 712802000000000000   | 	jle Done		# ...no more elements left.
0x1d8:                      | Loop:
0x1d8: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# Read val from src...
0x1e2: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst.
0x1ec: 62aa                 | 	andq %r10, %r10		# If val <= 0...
0x1ee: 710102000000000000   | 	jle NotPos		# ...go to NotPos...
0x1f7: c0f00100000000000000 | 	iaddq $1, %rax		# ...else count++.
0x201:                      | NotPos:	
0x201: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x20b: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x215: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x21f: 76d801000000000000   | 	jg Loop			# If len > 0, continue with remaining elements.
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x228:                      | Done:
0x228: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x229:                      | End:
                            | #/* $end ncopy-ys */
0x229:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x230:                      | 	.align 8
0x230:                      | src:
0x230: 0100000000000000     | 	.quad 1
0x238: feffffffffffffff     | 	.quad -2
0x240: 0300000000000000     | 	.quad 3
0x248: fcffffffffffffff     | 	.quad -4
0x250: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x260:                      | 	.align 16
0x260:                      | Predest:
0x260: fadebc0000000000     | 	.quad 0xbcdefa
0x268:                      | dest:
0x268: abefcd0000000000     | 	.quad 0xcdefab
0x270: abefcd0000000000     | 	.quad 0xcdefab
0x278: abefcd0000000000     | 	.quad 0xcdefab
0x280: abefcd0000000000     | 	.quad 0xcdefab
0x288:                      | Postdest:
0x288: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x290:                      | .align 8
                            | # Run time stack
0x290: 0000000000000000     | 	.quad 0
0x298: 0000000000000000     | 	.quad 0
0x2a0: 0000000000000000     | 	.quad 0
0x2a8: 0000000000000000     | 	.quad 0
0x2b0: 0000000000000000     | 	.quad 0
0x2b8: 0000000000000000     | 	.quad 0
0x2c0: 0000000000000000     | 	.quad 0
0x2c8: 0000000000000000     | 	.quad 0
0x2d0: 0000000000000000     | 	.quad 0
0x2d8: 0000000000000000     | 	.quad 0
0x2e0: 0000000000000000     | 	.quad 0
0x2e8: 0000000000000000     | 	.quad 0
0x2f0: 0000000000000000     | 	.quad 0
0x2f8: 0000000000000000     | 	.quad 0
0x300: 0000000000000000     | 	.quad 0
0x308: 0000000000000000     | 	.quad 0
                            | 
0x310:                      | Stack:
