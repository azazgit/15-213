#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-y:wqs */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# Set count to 0.
	andq %rdx,%rdx		# If len <= 0...
	jle Done		# ... go to Done.

	# Check if less than 8 elements.
	rrmovq %rdx, %r8
	iaddq $-8, %r8		# %r8 will hold no of elements remaining. See later use. 
	jl LessThan8Elements
index0:
	mrmovq (%rdi), %r10	# Read val from src...
	rmmovq %r10, (%rsi)	# ...and store it at dst.
	andq %r10, %r10		# If val <= 0...
	jle index1		# ...go to next element,...
	iaddq $1, %rax		# ...else count++.
index1:
	mrmovq 8(%rdi), %r10	
	rmmovq %r10, 8(%rsi)
	andq %r10, %r10
	jle index2
	iaddq $1, %rax
index2:
	mrmovq 16(%rdi), %r10	
	rmmovq %r10, 16(%rsi)
	andq %r10, %r10
	jle index3
	iaddq $1, %rax
index3:
	mrmovq 24(%rdi), %r10	
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle index4
	iaddq $1, %rax
index4:
	mrmovq 32(%rdi), %r10	
	rmmovq %r10, 32(%rsi)
	andq %r10, %r10
	jle index5
	iaddq $1, %rax
index5:
	mrmovq 40(%rdi), %r10	
	rmmovq %r10, 40(%rsi)
	andq %r10, %r10
	jle index6
	iaddq $1, %rax
index6:
	mrmovq 48(%rdi), %r10	
	rmmovq %r10, 48(%rsi)
	andq %r10, %r10
	jle index7
	iaddq $1, %rax
index7:
	mrmovq 56(%rdi), %r10	
	rmmovq %r10, 56(%rsi)
	andq %r10, %r10
	jle NextBatch
	iaddq $1, %rax
NextBatch:
	iaddq $64, %rdi		# Point to the start of the next 8 elements in src array.
	iaddq $64, %rsi		# Point to the start of the next 8 elements in dst array.
	iaddq $-8, %rdx		# At this point 8 elems have been looped, but %rdx does not ...
	iaddq $-8, %r8		# ...reflect this. Only %r8 does, which is why we use value in %r8.
	jge index0
LessThan8Elements:
	andq %rdx, %rdx		# If len <= 0...
	jle Done		# ...no more elements left.
Loop:
	mrmovq (%rdi), %r10	# Read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst.
	andq %r10, %r10		# If val <= 0...
	jle NotPos		# ...go to NotPos...
	iaddq $1, %rax		# ...else count++.
NotPos:	
	iaddq $8, %rdi		# src++
	iaddq $8, %rsi		# dst++
	iaddq $-1, %rdx		# len--
	jg Loop			# If len > 0, continue with remaining elements.

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad 3
	.quad -4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
