                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f63804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73002000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-y:wqs */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# Set count to 0.
0x034: 6222                 | 	andq %rdx,%rdx		# If len <= 0...
0x036: 712802000000000000   | 	jle Done		# ... go to Done.
                            | 
                            | 	# Check if less than 8 elements.
0x03f: 2028                 | 	rrmovq %rdx, %r8
0x041: c0f8f8ffffffffffffff | 	iaddq $-8, %r8		# %r8 will hold no of elements remaining. See later use. 
0x04b: 72cd01000000000000   | 	jl LessThan8Elements
0x054:                      | index0:
0x054: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# Read val from src...
0x05e: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it at dst.
0x068: 62aa                 | 	andq %r10, %r10		# If val <= 0...
0x06a: 717d00000000000000   | 	jle index1		# ...go to next element,...
0x073: c0f00100000000000000 | 	iaddq $1, %rax		# ...else count++.
0x07d:                      | index1:
0x07d: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	
0x087: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
0x091: 62aa                 | 	andq %r10, %r10
0x093: 71a600000000000000   | 	jle index2
0x09c: c0f00100000000000000 | 	iaddq $1, %rax
0x0a6:                      | index2:
0x0a6: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	
0x0b0: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0ba: 62aa                 | 	andq %r10, %r10
0x0bc: 71cf00000000000000   | 	jle index3
0x0c5: c0f00100000000000000 | 	iaddq $1, %rax
0x0cf:                      | index3:
0x0cf: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	
0x0d9: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)
0x0e3: 62aa                 | 	andq %r10, %r10
0x0e5: 71f800000000000000   | 	jle index4
0x0ee: c0f00100000000000000 | 	iaddq $1, %rax
0x0f8:                      | index4:
0x0f8: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	
0x102: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)
0x10c: 62aa                 | 	andq %r10, %r10
0x10e: 712101000000000000   | 	jle index5
0x117: c0f00100000000000000 | 	iaddq $1, %rax
0x121:                      | index5:
0x121: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	
0x12b: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)
0x135: 62aa                 | 	andq %r10, %r10
0x137: 714a01000000000000   | 	jle index6
0x140: c0f00100000000000000 | 	iaddq $1, %rax
0x14a:                      | index6:
0x14a: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	
0x154: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)
0x15e: 62aa                 | 	andq %r10, %r10
0x160: 717301000000000000   | 	jle index7
0x169: c0f00100000000000000 | 	iaddq $1, %rax
0x173:                      | index7:
0x173: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	
0x17d: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)
0x187: 62aa                 | 	andq %r10, %r10
0x189: 719c01000000000000   | 	jle NextBatch
0x192: c0f00100000000000000 | 	iaddq $1, %rax
0x19c:                      | NextBatch:
0x19c: c0f74000000000000000 | 	iaddq $64, %rdi		# Point to the start of the next 8 elements in src array.
0x1a6: c0f64000000000000000 | 	iaddq $64, %rsi		# Point to the start of the next 8 elements in dst array.
0x1b0: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# At this point 8 elems have been looped, but %rdx does not ...
0x1ba: c0f8f8ffffffffffffff | 	iaddq $-8, %r8		# ...reflect this. Only %r8 does, which is why we use value in %r8.
0x1c4: 755400000000000000   | 	jge index0
0x1cd:                      | LessThan8Elements:
0x1cd: 6222                 | 	andq %rdx, %rdx		# If len <= 0...
0x1cf: 712802000000000000   | 	jle Done		# ...no more elements left.
0x1d8:                      | Loop:
0x1d8: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# Read val from src...
0x1e2: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst.
0x1ec: 62aa                 | 	andq %r10, %r10		# If val <= 0...
0x1ee: 710102000000000000   | 	jle NotPos		# ...go to NotPos...
0x1f7: c0f00100000000000000 | 	iaddq $1, %rax		# ...else count++.
0x201:                      | NotPos:	
0x201: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x20b: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x215: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x21f: 76d801000000000000   | 	jg Loop			# If len > 0, continue with remaining elements.
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x228:                      | Done:
0x228: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x229:                      | End:
                            | #/* $end ncopy-ys */
0x229:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x230:                      | 	.align 8
0x230:                      | src:
0x230: ffffffffffffffff     | 	.quad -1
0x238: 0200000000000000     | 	.quad 2
0x240: fdffffffffffffff     | 	.quad -3
0x248: fcffffffffffffff     | 	.quad -4
0x250: fbffffffffffffff     | 	.quad -5
0x258: faffffffffffffff     | 	.quad -6
0x260: 0700000000000000     | 	.quad 7
0x268: 0800000000000000     | 	.quad 8
0x270: 0900000000000000     | 	.quad 9
0x278: 0a00000000000000     | 	.quad 10
0x280: f5ffffffffffffff     | 	.quad -11
0x288: f4ffffffffffffff     | 	.quad -12
0x290: f3ffffffffffffff     | 	.quad -13
0x298: f2ffffffffffffff     | 	.quad -14
0x2a0: 0f00000000000000     | 	.quad 15
0x2a8: f0ffffffffffffff     | 	.quad -16
0x2b0: 1100000000000000     | 	.quad 17
0x2b8: eeffffffffffffff     | 	.quad -18
0x2c0: edffffffffffffff     | 	.quad -19
0x2c8: ecffffffffffffff     | 	.quad -20
0x2d0: 1500000000000000     | 	.quad 21
0x2d8: eaffffffffffffff     | 	.quad -22
0x2e0: e9ffffffffffffff     | 	.quad -23
0x2e8: 1800000000000000     | 	.quad 24
0x2f0: 1900000000000000     | 	.quad 25
0x2f8: 1a00000000000000     | 	.quad 26
0x300: 1b00000000000000     | 	.quad 27
0x308: 1c00000000000000     | 	.quad 28
0x310: 1d00000000000000     | 	.quad 29
0x318: e2ffffffffffffff     | 	.quad -30
0x320: e1ffffffffffffff     | 	.quad -31
0x328: e0ffffffffffffff     | 	.quad -32
0x330: dfffffffffffffff     | 	.quad -33
0x338: 2200000000000000     | 	.quad 34
0x340: ddffffffffffffff     | 	.quad -35
0x348: dcffffffffffffff     | 	.quad -36
0x350: 2500000000000000     | 	.quad 37
0x358: 2600000000000000     | 	.quad 38
0x360: 2700000000000000     | 	.quad 39
0x368: d8ffffffffffffff     | 	.quad -40
0x370: 2900000000000000     | 	.quad 41
0x378: 2a00000000000000     | 	.quad 42
0x380: d5ffffffffffffff     | 	.quad -43
0x388: 2c00000000000000     | 	.quad 44
0x390: d3ffffffffffffff     | 	.quad -45
0x398: d2ffffffffffffff     | 	.quad -46
0x3a0: 2f00000000000000     | 	.quad 47
0x3a8: 3000000000000000     | 	.quad 48
0x3b0: cfffffffffffffff     | 	.quad -49
0x3b8: ceffffffffffffff     | 	.quad -50
0x3c0: cdffffffffffffff     | 	.quad -51
0x3c8: ccffffffffffffff     | 	.quad -52
0x3d0: 3500000000000000     | 	.quad 53
0x3d8: 3600000000000000     | 	.quad 54
0x3e0: 3700000000000000     | 	.quad 55
0x3e8: c8ffffffffffffff     | 	.quad -56
0x3f0: c7ffffffffffffff     | 	.quad -57
0x3f8: c6ffffffffffffff     | 	.quad -58
0x400: 3b00000000000000     | 	.quad 59
0x408: 3c00000000000000     | 	.quad 60
0x410: 3d00000000000000     | 	.quad 61
0x418: 3e00000000000000     | 	.quad 62
0x420: 3f00000000000000     | 	.quad 63
0x428: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x430:                      | 	.align 16
0x430:                      | Predest:
0x430: fadebc0000000000     | 	.quad 0xbcdefa
0x438:                      | dest:
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0: abefcd0000000000     | 	.quad 0xcdefab
0x5c8: abefcd0000000000     | 	.quad 0xcdefab
0x5d0: abefcd0000000000     | 	.quad 0xcdefab
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630:                      | Postdest:
0x630: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x638:                      | .align 8
                            | # Run time stack
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
0x648: 0000000000000000     | 	.quad 0
0x650: 0000000000000000     | 	.quad 0
0x658: 0000000000000000     | 	.quad 0
0x660: 0000000000000000     | 	.quad 0
0x668: 0000000000000000     | 	.quad 0
0x670: 0000000000000000     | 	.quad 0
0x678: 0000000000000000     | 	.quad 0
0x680: 0000000000000000     | 	.quad 0
0x688: 0000000000000000     | 	.quad 0
0x690: 0000000000000000     | 	.quad 0
0x698: 0000000000000000     | 	.quad 0
0x6a0: 0000000000000000     | 	.quad 0
0x6a8: 0000000000000000     | 	.quad 0
0x6b0: 0000000000000000     | 	.quad 0
                            | 
0x6b8:                      | Stack:
